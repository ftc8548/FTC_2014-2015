#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTServo,  HTMotor)
#pragma config(Sensor, S2,     gyroSensor,     sensorI2CHiTechnicGyro)
#pragma config(Sensor, S3,     irSensor,       sensorHiTechnicIRSeeker600)
#pragma config(Motor,  mtr_S1_C1_1,     leftWheel,     		tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     firstPickupMotor,   tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C2_1,     rightWheel,    		tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C2_2,     liftMotor,          tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C4_1, 		secondPickupMotor,	tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C4_2,     liftMotor,     		tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C3_1,    servo1,            tServoStandard)
#pragma config(Servo,  srvo_S1_C3_2,    servo2,         	tServoNone)
#pragma config(Servo,  srvo_S1_C3_3,    dropServo,          tServoNone)
#pragma config(Servo,  srvo_S1_C3_4,    clampServoR,             tServoNone)
#pragma config(Servo,  srvo_S1_C3_5,    clampServoL,             tServoNone)
#pragma config(Servo,  srvo_S1_C3_6,    irServo,             tServoNone)
//#pragma config(Motor,  mtr_S1_C4_1,     liftMotor,     tmotorTetrix, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "includes.h"

/////////////////////////////// Changable Variables ////////////////////

const int liftPower = 10;
const int dropPower = -30;
const int pickupPower = 40;
const int stopPower = 0;
const int startPosClampR = 110;
const int startPosClampL = 110;
const int endPosClampR = 240;
const int endPosClampL = 10;
const int startPosDrop = 250;
const int endPosDrop = 180;
////////////////////////////// Don't Change These Variables //////////////
bool isLift = false;
bool isPickup = false;
bool isTurning = false;
float l_distanceTraveled = 0.0;

/////////////////////////// Function Declarations //////////////////////

// gets the robot ready
void getReady();

/////////////////////////// Task Declarations ///////////////////////
task t_liftEncoder();
task t_raiseLiftLow();
task t_raiseLiftMiddle();
task t_raiseLiftHigh();
task t_raiseLiftCenter();
task t_lowerLift();
task t_lowerLift();
task t_raiseLift();
task t_stopLift();
task t_startPickup();
task t_reversePickup();
task t_stopPickup();
task t_dropClamp();
task t_raiseClamp();
task t_dropBall();
task t_resetDrop();

////////////////////////// Function Definitions /////////////////////

// gets the robot ready
void getReady() {
	Task_Spawn(t_liftEncoder);		// starts the lift encoder
	servo[dropServo] = startPosDrop; 	// resets drop servo
	motor[firstPickupMotor] = stopPower; 	// stops the pickup
	motor[secondPickupMotor] = stopPower; 	// stops the pickup
	isPickup = false; 			// stops the pickup
}

/////////////////////////////// Task Definitions ////////////////////

// tells position of the lift
task t_liftEncoder() {
	float l_vel_curr = 0.0;
	float l_dt = 0.0;
	int timer_lift;
	Time_ClearTimer(timer_lift);
	while(true) {
		l_dt = (float)Time_GetTime(timer_lift) / 1000.0;
		Time_ClearTimer(timer_lift);
		l_vel_curr = (float)(Motor_GetEncoder(liftMotor));
		l_distanceTraveled += l_vel_curr * l_dt;
		wait1Msec(1);
	}
}

// raises the lift slightly
task t_lowerLift() {
	while(true) {
		motor[liftMotor] = dropPower;
	}
	wait1Msec(1);
}

// raises lift slightly
task t_raiseLift() {
	while(true) {
		motor[liftMotor] = liftPower;
	}
	wait1Msec(1);
}

// stops the lift
task t_stopLift() {
	motor[liftMotor] = stopPower;
	wait1Msec(1);
}

// pick up balls
task t_startPickup() {
	while(true) {
		motor[firstPickupMotor] = pickupPower;
		motor[secondPickupMotor] = pickupPower;
		isPickup = true;
	}
	wait1Msec(1);
}

// reverses the pickup
task t_reversePickup() {
	while(true) {
		motor[firstPickupMotor] = -pickupPower;
		motor[secondPickupMotor] = -pickupPower;
		isPickup = true;
	}
	wait1Msec(1);
}

task t_stopPickup() {
	motor[firstPickupMotor] = stopPower;
	motor[secondPickupMotor] = stopPower;
	isPickup = false;
	wait1Msec(1);
}

// drops the clamp
task t_dropClamp() {
	servo[clampServoR] = endPosClampR;
	servo[clampServoL] = endPosClampL;
	wait1Msec(1);
}

// raises the clamp
task t_raiseClamp() {
	servo[clampServoR] = startPosClampR;
	servo[clampServoL] = startPosClampL;
	wait1Msec(1);
}

// drops the balls
task t_dropBall() {
	servo[dropServo] = endPosDrop;
	wait1Msec(1);
}

// resets the drop servo
task t_resetDrop() {
	servo[dropServo] = startPosDrop;
	wait1Msec(1);
}
