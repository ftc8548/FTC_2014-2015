#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTServo,  HTMotor)
#pragma config(Sensor, S2,     gyroSensor,     sensorI2CHiTechnicGyro)
#pragma config(Sensor, S3,     irSensor,       sensorHiTechnicIRSeeker600)
#pragma config(Motor,  mtr_S1_C1_1,     leftWheel,     		tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     firstPickupMotor,   tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C2_1,     rightWheel,    		tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C2_2,     liftMotor,          tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C4_1, 		secondPickupMotor,	tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C4_2,     liftMotor,     		tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C3_1,    servo1,            tServoStandard)
#pragma config(Servo,  srvo_S1_C3_2,    servo2,         	tServoNone)
#pragma config(Servo,  srvo_S1_C3_3,    dropServo,          tServoNone)
#pragma config(Servo,  srvo_S1_C3_4,    clampServoR,             tServoNone)
#pragma config(Servo,  srvo_S1_C3_5,    clampServoL,             tServoNone)
#pragma config(Servo,  srvo_S1_C3_6,    irServo,             tServoNone)
//#pragma config(Motor,  mtr_S1_C4_1,     liftMotor,     tmotorTetrix, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "includes.h"

/////////////////////////////// Changable Variables ////////////////////

const int liftPower = 80;
const int dropPower = -20;
const int pickupPower = 40;
const int stopPower = 0;
const int startPosClampR = 110;
const int startPosClampL = 110;
const int endPosClampR = 240;
const int endPosClampL = 10;
const int startPosDrop = 250;
const int endPosDrop = 180;
////////////////////////////// Don't Change These Variables //////////////
bool isLift = false;
bool isPickup = false;
bool isTurning = false;
typedef enum Position {
	upLow,
	upMiddle,
	upHigh,
	upCenter,
	down
};
Position position = down;

///////////////////////////// Function Declarations ///////////////////

// raises the lift
void raiseLift(bool isLift);
// lowers the lift
void lowerLift(bool isLift);
// stops the lift
void stopLift();
// starts the pickup
void startPickup();
// reverses the pickup
void reversePickup();

/////////////////////////// Task Declarations ///////////////////////

task t_raiseLiftLow();
task t_raiseLiftMiddle();
task t_raiseLiftHigh();
task t_raiseLiftCenter();
task t_lowerLift();
task t_lowerLiftSlightly();
task t_raiseLiftSlightly();
task t_stopLift();
task t_startPickup();
task t_reversePickup();
task t_stopPickup();
task t_dropClamp();
task t_raiseClamp();
task t_dropBall();
task t_resetDrop();

/////////////////////////// Function Definitions ///////////////////////

// raises the lift
void raiseLift(int seconds) {
	motor[liftMotor] = liftPower;
	wait1Msec(seconds);
	motor[liftMotor] = stopPower;
}

// raises the lift
void raiseLift(bool isLift) {
	while(true) {
		motor[liftMotor] = liftPower;
	}
	wait1Msec(1);
}

// lowers the lift
void lowerLift(bool isLift) {
	while(true) {
		motor[liftMotor] = dropPower;
	}
	wait1Msec(1);
}

// stops the lift
void stopLift() {
	motor[liftMotor] = stopPower;
	wait1Msec(1);
}

// picks up balls
void startPickup() {
	while(true) {
		motor[firstPickupMotor] = pickupPower;
		motor[secondPickupMotor] = pickupPower;
		isPickup = true;
	}
	wait1Msec(1);
}

// releases balls from the pickup
void reversePickup() {
	while(true) {
		motor[firstPickupMotor] = -pickupPower;
		motor[secondPickupMotor] = -pickupPower;
		isPickup = true;
	}
	wait1Msec(1);
}

/////////////////////////////// Task Definitions ////////////////////

// raises the lift slightly
task t_lowerLiftSlightly() {
	lowerLift(isLift);
	wait1Msec(1);
}

// raises lift slightly
task t_raiseLiftSlightly() {
	raiseLift(isLift);
	wait1Msec(1);
}

// stops the lift
task t_stopLift() {
	stopLift();
	wait1Msec(1);
}

// pick up balls
task t_startPickup() {
	startPickup();
	wait1Msec(1);
}

// reverese the pickup
task t_reversePickup() {
	reversePickup();
	wait1Msec(1);
}

task t_stopPickup() {
	motor[firstPickupMotor] = stopPower;
	motor[secondPickupMotor] = stopPower;
	isPickup = false;
	wait1Msec(1);
}

// drops the clamp
task t_dropClamp() {
	servo[clampServoR] = endPosClampR;
	servo[clampServoL] = endPosClampL;
	wait1Msec(1);
}

// raises the clamp
task t_raiseClamp() {
	servo[clampServoR] = startPosClampR;
	servo[clampServoL] = startPosClampL;
	wait1Msec(1);
}

// drops the balls
task t_dropBall() {
	servo[dropServo] = endPosDrop;
	wait1Msec(1);
}

// resets the drop servo
task t_resetDrop() {
	servo[dropServo] = startPosDrop;
	wait1Msec(1);
}
